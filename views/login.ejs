<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>FACEIT Bot Login</title>
	<style>
		body {
			font-family: Arial, sans-serif;
			background-color: #1a1a1a;
			color: #ffffff;
			display: flex;
			justify-content: center;
			align-items: center;
			min-height: 100vh;
			margin: 0;
			padding: 20px;
		}

		.container {
			background-color: #2d2d2d;
			padding: 40px;
			border-radius: 8px;
			box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
			text-align: center;
			max-width: 400px;
			width: 100%;
		}

		h1 {
			margin-bottom: 30px;
			color: #ff5500;
		}

		.info {
			margin-top: 20px;
			font-size: 14px;
			color: #999;
		}

		.logo {
			width: 150px;
			margin-bottom: 30px;
		}

		.login-button {
			background-color: #ff5500;
			color: white;
			border: none;
			padding: 12px 24px;
			border-radius: 4px;
			cursor: pointer;
			font-size: 16px;
			text-decoration: none;
			display: inline-block;
			transition: background-color 0.3s;
			margin-top: 20px;
		}

		.login-button:hover {
			background-color: #ff6a1f;
		}

		.debug-info {
			margin-top: 20px;
			font-size: 12px;
			color: #666;
			text-align: left;
			word-break: break-all;
		}

		.error-message {
			color: #ff3333;
			margin-top: 10px;
			font-size: 14px;
			display: none;
		}
	</style>
</head>

<body>
	<div class="container">
		<img src="https://cdn.faceit.com/frontend/291/assets/FACEIT_LOGO_RGB.svg" alt="FACEIT Logo" class="logo">
		<h1>FACEIT Bot Authentication</h1>
		<button id="loginButton" class="login-button">Login with FACEIT</button>
		<p class="info">Click the button above to authenticate with FACEIT.</p>
		<p id="errorMessage" class="error-message"></p>
		<div class="debug-info">
			<p>Client ID: <%= clientId %>
			</p>
			<p>Redirect URI: <%= redirectUri %>
			</p>
		</div>
	</div>

	<script>
		// Function to generate random string for state
		function generateRandomString(length) {
			const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
			let text = '';
			for (let i = 0; i < length; i++) {
				text += possible.charAt(Math.floor(Math.random() * possible.length));
			}
			return text;
		}

		// Function to generate code verifier for PKCE
		function generateCodeVerifier() {
			return generateRandomString(128);
		}

		// Function to generate code challenge from verifier
		async function generateCodeChallenge(verifier) {
			const encoder = new TextEncoder();
			const data = encoder.encode(verifier);
			const digest = await crypto.subtle.digest('SHA-256', data);
			return btoa(String.fromCharCode(...new Uint8Array(digest)))
				.replace(/\+/g, '-')
				.replace(/\//g, '_')
				.replace(/=+$/, '');
		}

		// Function to show error message
		function showError(message) {
			const errorElement = document.getElementById('errorMessage');
			errorElement.textContent = message;
			errorElement.style.display = 'block';
		}

		// Initialize auth flow
		async function initAuth() {
			try {
				const state = generateRandomString(32);
				const codeVerifier = generateCodeVerifier();
				const codeChallenge = await generateCodeChallenge(codeVerifier);

				// Store PKCE and state values
				sessionStorage.setItem('pkce_verifier', codeVerifier);
				sessionStorage.setItem('pkce_state', state);

				const params = new URLSearchParams({
					response_type: 'code',
					client_id: '<%= clientId %>',
					redirect_uri: '<%= redirectUri %>',
					scope: 'openid profile',
					state: state,
					code_challenge: codeChallenge,
					code_challenge_method: 'S256'
				});

				const authUrl = `https://accounts.faceit.com/oauth/authorize?${params.toString()}`;
				window.location.href = authUrl;
			} catch (error) {
				console.error('Error initializing auth:', error);
				showError('Failed to initialize authentication. Please try again.');
			}
		}

		// Add click event listener to login button
		document.getElementById('loginButton').addEventListener('click', initAuth);

		// Handle the OAuth callback
		if (window.location.search) {
			const params = new URLSearchParams(window.location.search);
			const code = params.get('code');
			const state = params.get('state');
			const storedState = sessionStorage.getItem('pkce_state');
			const codeVerifier = sessionStorage.getItem('pkce_verifier');

			if (code && state === storedState && codeVerifier) {
				// Clean up session storage
				sessionStorage.removeItem('pkce_state');
				sessionStorage.removeItem('pkce_verifier');

				// Exchange code for token
				fetch('/callback', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({
						code,
						code_verifier: codeVerifier
					})
				})
					.then(res => res.json())
					.then(data => {
						if (data.success && data.redirect) {
							window.location.href = data.redirect;
						} else {
							showError('Authentication failed. Please try again.');
						}
					})
					.catch(error => {
						console.error('Error:', error);
						showError('Authentication failed. Please try again.');
					});
			} else if (params.get('error')) {
				showError(`Authentication failed: ${params.get('error_description') || params.get('error')}`);
			}
		}
	</script>
</body>

</html>